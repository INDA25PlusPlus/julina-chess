/*
Represent the board and pieces using bitboards, one for each piece and color combination,
as suggested in https://en.wikipedia.org/wiki/Bitboard.

That is, there's one bitboard for white pawns (0 means no white pawn, 1 means white pawn), one
bitboard for black knights, etc. (With a single bitboard you would only know whether a piece occupies
the square, but no information of the type and color of the piece).

Bit 0 represents square a1, bit 2 represents c1 and so on, (from left to right, bottom to top).

let mut u64 example = 0b0000000000000000000000000000000000000000000000000000000000000000;
In example, the right-most bit (bit 0) represents the square a1

The occupation of the squares is initialized based on the starting position of a chess game.

*/

let mut u64 white_pawn = 0b0000000000000000000000000000000000000000000000001111111100000000;
let mut u64 white_rook = 0b0000000000000000000000000000000000000000000000000000000010000001;
let mut u64 white_knight = 0b0000000000000000000000000000000000000000000000000000000001000010;
let mut u64 white_bishop = 0b0000000000000000000000000000000000000000000000000000000000100100;
let mut u64 white_queen = 0b0000000000000000000000000000000000000000000000000000000000001000;
let mut u64 white_king = 0b0000000000000000000000000000000000000000000000000000000000010000;

let mut u64 black_pawn = 0b0000000011111111000000000000000000000000000000000000000000000000;
let mut u64 black_rook = 0b1000000100000000000000000000000000000000000000000000000000000000;
let mut u64 black_knight = 0b0100001000000000000000000000000000000000000000000000000000000000;
let mut u64 black_bishop = 0b0010010000000000000000000000000000000000000000000000000000000000;
let mut u64 black_queen = 0b0000100000000000000000000000000000000000000000000000000000000000;
let mut u64 black_king = 0b0000010000000000000000000000000000000000000000000000000000000000;